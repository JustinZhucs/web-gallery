import "~/styles/globals.css";
import "@uploadthing/react/styles.css";
import { NextSSRPlugin } from "@uploadthing/react/next-ssr-plugin";


import {
  ClerkProvider,
  SignInButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from '@clerk/nextjs'

import { type Metadata } from "next";
import { Geist } from "next/font/google";
import Link from "next/link";
import { TopNav } from "./_components/topnav";
import { extractRouterConfig } from "uploadthing/server";
import { ourFileRouter } from "./api/uploadthing/core";


export const metadata: Metadata = {
  title: "Web Gallery",
  description: "Generated by Justisus",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

const geist = Geist({
  subsets: ["latin"],
  variable: "--font-geist-sans",
});

export default function RootLayout({
  children,
  modal,
}: { 
  children: React.ReactNode;
  modal: React.ReactNode;
}) {
  return (
    <ClerkProvider>
      <html lang="en" className="m-0">
      <NextSSRPlugin
          /**
           * The `extractRouterConfig` will extract **only** the route configs
           * from the router to prevent additional information from being
           * leaked to the client. The data passed to the client is the same
           * as if you were to fetch `/api/uploadthing` directly.
           */
          routerConfig={extractRouterConfig(ourFileRouter)}
        />
        <body className={`font-sans ${geist.variable}`}>
          <div className="h-screen grid grid-rows-[8vh,1fr]"> 
            {/* 1fr: one fraction, 
              grid-rows-[auto,1fr] will make the navbar grow when there's not enough main content 
              to fill up the screen
              ex. ┌─────────────────┐ ← 100vh (1000px total)
                  │   TopNav        │ ← auto (60px - only what it needs)
                  │   (auto)        │
                  ├─────────────────┤
                  │   Main Content  │ ← 1fr (940px - all remaining space)
                  │   (940px)       │
                  └─────────────────┘
              This way the topnav height can't be controled,
              right now, I changed auto to 8vh to make topnav's height fixed and also visible on different screen sizes
              8vh = 8% of viewport height
              Scales with screen = Bigger on larger screens*/}
            <TopNav />
            <main className="overflow-y-scroll">{children}</main>
          </div>
          {modal}
          <div id="modal-root" />
        </body>
      </html>
    </ClerkProvider>
  );
}
